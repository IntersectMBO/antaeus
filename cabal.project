-- Custom repository for cardano haskell packages
-- See https://github.com/input-output-hk/cardano-haskell-packages on how to use CHaP in a Haskell project.
repository cardano-haskell-packages
  url: https://input-output-hk.github.io/cardano-haskell-packages
  secure: True
  root-keys:
    3e0cce471cf09815f930210f7827266fd09045445d65923e6d0238a6cd15126f
    443abb7fb497a134c343faf52f0b659bd7999bc06b7f63fa76dc99d631f9bea1
    a86a1f6ce86c449c46666bda44268677abf29b5b2d2eb5ec7af903ec2f117a82
    bcec67e8e99cabfa7764d75ad9b158d72bfacf70ca1d0ec8bc6b4406d1bf8413
    c00aae8461a256275598500ea0e187588c35a5d5d7454fb57eac18d9edb86a56
    d4a35cd3121aa00d18544bb0ac01c3e1691d618f462c46129271bccf39f7e8ee

index-state: 2023-02-28T00:00:00Z

-- See CONTRIBUTING.adoc for how to update index-state
index-state:
  , hackage.haskell.org 2023-02-28T00:00:00Z
  , cardano-haskell-packages 2023-03-13T07:15:21Z
packages: e2e-tests

-- We never, ever, want this.
write-ghc-environment-files: never

-- Always build tests and benchmarks.
tests: true
benchmarks: true

-- The only sensible test display option, since it allows us to have colourized
-- 'tasty' output.
test-show-details: direct

allow-newer:
  -- cardano-ledger packages need aeson >2, the following packages have a
  -- too restictive upper bounds on aeson, so we relax them here. The hackage
  -- trustees can make a revision to these packages cabal file to solve the
  -- issue permanently.
  , ekg:aeson
  , ekg-json:aeson
  , openapi3:aeson
  , servant:aeson
  , servant-client-core:aeson
  , servant-server:aeson
  , servant-foreign:lens

allow-older:
  -- freer-extras works with lens-5.2 (rather than 5.2.1)
  , freer-extras:lens
  -- freer-extras works with resource-pool-0.3.1.0 (rather than 0.4.0.0)
  , freer-extras:resource-pool
  -- plutus-ledger works with lens-5.2 (rather than 5.2.1)
  , plutus-ledger:lens

constraints:
  -- cardano-prelude-0.1.0.0 needs
  , protolude <0.3.1

  -- cardano-ledger-byron-0.1.0.0 needs
  , cardano-binary <1.5.0.1

  -- plutus-core-1.0.0.1 needs
  , cardano-crypto-class >2.0.0.0
  , algebraic-graphs <0.7

  , cardano-data == 0.1.0.0

  -- cardano-ledger-core-0.1.0.0 needs
  , cardano-crypto-class <2.0.0.1

  -- cardano-crypto-class-2.0.0.0.1 needs
  , cardano-prelude <0.1.0.1

  -- dbvar from cardano-wallet needs
  , io-classes <0.3.0.0

  -- newer typed-protocols need io-classes>=0.3.0.0 which is incompatible with dbvar's constraint above
  , typed-protocols==0.1.0.0

  , aeson >= 2

  , hedgehog >= 1.1

  , resource-pool <0.4.0.0

  , http2 <4.0.0

  -- ouroboros-consensus-shelley-0.1.0.1 needs
  , ouroboros-consensus-protocol==0.1.0.1

  -- ledger packages:
  , cardano-ledger-alonzo == 0.1.0.0
  , cardano-ledger-babbage == 0.1.0.0
  , cardano-ledger-byron == 0.1.0.0
  , cardano-ledger-byron-test == 1.3.0
  , cardano-ledger-conway == 0.1.0.0
  , cardano-ledger-core == 0.1.0.0
  , cardano-ledger-pretty == 0.1.0.0
  , cardano-ledger-shelley == 0.1.0.0
  , cardano-ledger-shelley-ma == 0.1.0.0
  , cardano-crypto-test == 1.3.0
  , cardano-crypto-wrapper == 1.3.0
  , byron-spec-chain == 0.1.0.0
  , byron-spec-ledger == 0.1.0.0
  , set-algebra == 0.1.0.0
  , small-steps == 0.1.0.0
  , small-steps-test == 0.1.0.0
  , vector-map == 0.1.0.0

-- These packages appear in our dependency tree and are very slow to build.
-- Empirically, turning off optimization shaves off ~50% build time.
-- It also mildly improves recompilation avoidance.
-- For dev work we don't care about performance so much, so this is okay.
package cardano-ledger-alonzo
  optimization: False
package ouroboros-consensus-shelley
  optimization: False
package ouroboros-consensus-cardano
  optimization: False
package cardano-api
  optimization: False

